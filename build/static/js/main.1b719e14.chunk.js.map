{"version":3,"sources":["firebase.js","StateProvider.js","Chat.js","reducer.js","Login.js","SidebarChat.js","Sidebar.js","App.js","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Chat","useState","input","setInput","seed","setSeed","roomId","useParams","roomName","setRoomName","messages","setMessages","user","useEffect","collection","doc","onSnapshot","snapshot","data","name","orderBy","docs","map","Math","floor","random","className","Avatar","src","Date","length","timestamp","toDate","toUTCString","IconButton","SearchOutlined","AttachFile","MoreVert","message","displayName","InsertEmoticon","onChange","e","target","placeholder","type","onClick","preventDefault","console","log","add","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","SidebarChat","id","addNewChat","prompt","to","Sidebar","rooms","setRooms","unsubscribe","photoURL","room","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b719e14.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCh4Cp9VY7rXM_-eWbPXfuIbQqkwxEa2Ts\",\r\n  authDomain: \"whatsapp-clone-personal-98bdc.firebaseapp.com\",\r\n  projectId: \"whatsapp-clone-personal-98bdc\",\r\n  storageBucket: \"whatsapp-clone-personal-98bdc.appspot.com\",\r\n  messagingSenderId: \"788528794147\",\r\n  appId: \"1:788528794147:web:8d8ceb922d1c75fa40bf96\",\r\n  measurementId: \"G-C2401DLT54\"\r\n};\r\n   \r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\n// Prepare the data layer for what it has to come\r\nexport const StateContext = createContext();\r\n\r\n// This is the actual data layer \r\n// Children is what it is wrap inside which is the App in index.js\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n    // This is following the similiar layout as index.js\r\n    // Whenever we see use reducer, use context, they are all react hooks\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\n// Pull information from data layer\r\nexport const useStateValue = () => useContext(StateContext);","import { Avatar, IconButton } from '@material-ui/core';\r\nimport { AttachFile, InsertEmoticon, MoreVert, SearchOutlined } from '@material-ui/icons';\r\nimport React, { useEffect, useState } from 'react'\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport './Chat.css';\r\nimport { useParams } from 'react-router';\r\nimport db from \"./firebase\";\r\nimport { useStateValue } from './StateProvider';\r\nimport firebase from \"firebase\";\r\n\r\nfunction Chat() {\r\n    const [input, setInput] = useState(\"\");\r\n    const [seed, setSeed] = useState(\"\");\r\n    const { roomId } = useParams();\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {  \r\n        if (roomId) {\r\n            db.collection('rooms').doc(roomId)\r\n            .onSnapshot((snapshot) => \r\n                setRoomName(snapshot.data().name));\r\n            \r\n            db.collection(\"rooms\")\r\n            .doc(roomId)\r\n            .collection(\"messages\")\r\n            .orderBy(\"timestamp\", \"asc\")\r\n            .onSnapshot((snapshot) => \r\n            setMessages(snapshot.docs.map((doc) => doc.data())))\r\n        }\r\n    }, [roomId]) \r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5000));\r\n    }, [roomId])\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        console.log('You typed >>>> ', input)\r\n\r\n        db.collection('rooms')\r\n        .doc(roomId)\r\n        .collection('messages')\r\n        .add({\r\n            message: input,\r\n            name: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        })\r\n        setInput(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat\">    \r\n\r\n            <div className=\"chat__header\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n                \r\n                <div className=\"chat__headerInfo\">\r\n                    <h3>{roomName}</h3>\r\n                    <p>\r\n                    last seen{\" \"}\r\n                    {new Date(\r\n                    messages[messages.length - 1]?.timestamp?.toDate()).toUTCString()}\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"chat__headerRight\">\r\n                    <IconButton>\r\n                        <SearchOutlined/>\r\n                    </IconButton>\r\n\r\n                    <IconButton>\r\n                        <AttachFile/>\r\n                    </IconButton>\r\n\r\n                    <IconButton>\r\n                        <MoreVert/>\r\n                    </IconButton>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"chat__body\">\r\n                {messages.map((message) => (\r\n                     <p className={`chat__message ${\r\n                         message.name === user.displayName && \"chat__receiver\"}`}>\r\n                     <span className=\"chat__name\">{message.name}</span>\r\n                     {message.message}\r\n                     <span className=\"chat__timestamp\">\r\n                        {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                     </span>\r\n                 </p>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat__footer\">\r\n                <InsertEmoticon />\r\n                <form>\r\n                    {/* onChange gets fireoff everytime an event starts\r\n                    firing off */}\r\n                    <input \r\n                    value={input} \r\n                    onChange={(e) => setInput(e.target.value)} \r\n                    placeholder=\"Type a message\" \r\n                    type=\"text\"\r\n                    />\r\n                    {/* Every form needs some kind of submit */}\r\n                    <button onClick={sendMessage} \r\n                    type=\"submit\">Send a message</button>\r\n                </form>\r\n                <MicIcon/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState = {\r\n  user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\",\r\n}\r\n\r\n// State is how it currently looks like\r\n// Action is what i manipulate what the data layer looks like\r\n// For example: set the item that we are currently playing\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    // When you receive this action, you basically want to return \r\n    case actionTypes.SET_USER:\r\n      return {\r\n        // Keep whatever it is in the current state \r\n        // Need to have ...state otherwise it will overwrite the state\r\n        ...state,\r\n        // Update the user with whatever is inside the action\r\n        user: action.user,\r\n      };\r\n\r\n    default:\r\n      // nothing changes so it does not break my app\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { auth, provider } from './firebase'\r\nimport \"./Login.css\"\r\nimport { actionTypes } from './reducer';\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Login() {\r\n    // dispatch is like a gun, you put whatever \r\n    // payload in and shoot the datalayer to update\r\n    // the data layer\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider).then(result => {\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: result.user,\r\n          })\r\n        })\r\n       .catch(error => alert(error.message));\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\"\r\n                alt=\"\"\r\n                />\r\n                <div className=\"login__text\">\r\n                    <h1>Sign in to WhatsApp</h1>\r\n                </div>\r\n\r\n                <Button onClick={signIn}>\r\n                    Sign In With Google\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import { Avatar } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport './SidebarChat.css'\r\nimport db from \"./firebase\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction SidebarChat( { id, name, addNewChat } ) {\r\n    const [seed, setSeed] = useState(\"\");\r\n    const [messages, setMessages] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        // If parse me id\r\n        if (id) {\r\n            db.collection(\"rooms\")\r\n            .doc(id)\r\n            .collection(\"messages\")\r\n            .orderBy(\"timestamp\", \"desc\")\r\n            .onSnapshot((snapshot) => \r\n                setMessages(snapshot.docs.map((doc) => doc.data()))\r\n            )\r\n        }\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5000));\r\n    }, [])\r\n\r\n    const createChat = () => {\r\n        const roomName = prompt(\"Please enter name for chat room\")\r\n\r\n        if (roomName) {\r\n            // Do some clever database stuff...\r\n            db.collection('rooms').add({\r\n                name: roomName,\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // If it is not the addNewChat, i want to show the normal stuff\r\n    // Otherwise Add new chat!\r\n    return !addNewChat ? (\r\n        <Link to = {`/rooms/${id}`}>\r\n            <div className=\"sidebarChat\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n                <div className=\"sidebarChat__info\">\r\n                    <h2>{name}</h2>\r\n                    <p>{messages[0]?.message}</p>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    ): (\r\n        <div onClick={createChat}\r\n        className=\"sidebarChat\">\r\n            <h2>Add new Chat</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarChat\r\n","import { Avatar, IconButton } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport './Sidebar.css'\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { SearchOutlined } from '@material-ui/icons';\r\nimport SidebarChat from './SidebarChat';\r\nimport db from \"./firebase\";\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Sidebar() {\r\n    const [rooms, setRooms] = useState([]);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection(\"rooms\").onSnapshot((snapshot) => setRooms(\r\n            snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                data: doc.data()\r\n            }))\r\n        ))\r\n        \r\n        return () => {\r\n            unsubscribe();\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__header\">\r\n                <Avatar src = {user?.photoURL}/>\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton>\r\n                        <DonutLargeIcon/>\r\n                    </IconButton>\r\n\r\n                    <IconButton>\r\n                        <ChatIcon/>\r\n                    </IconButton>\r\n                    \r\n                    <IconButton>\r\n                        <MoreVertIcon/>\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"sidebar__search\">\r\n                <div className=\"sidebar__searchContainer\">\r\n                    <SearchOutlined/>\r\n                    <input placeholder=\"Search or start new chat\"\r\n                    type = \"text\"/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__chats\">\r\n                <SidebarChat addNewChat/>\r\n                {rooms.map(room => (\r\n                    <SidebarChat key={room.id} id={room.id}\r\n                    name={room.data.name}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router,Switch, Route} from 'react-router-dom';\nimport './App.css';\nimport Chat from \"./Chat\";\nimport Login from \"./Login\";\nimport Sidebar from \"./Sidebar\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n\n  return (\n    // BEM naming convention - easy way of naming components in React\n    <div className=\"app\">\n\n      {/* If there's no user, login \n      Otherwise show the app*/}\n      {!user ? (\n        <Login/>\n      ) : ( \n      <div className=\"app__body\">\n      <Router>\n              <Sidebar/>\n              <Switch>\n                <Route path=\"/rooms/:roomId\">\n                  <Chat/>\n                </Route>\n                <Route path=\"/\">\n                  <Chat/>\n                </Route>              \n              </Switch>            \n      </Router>\n      </div>\n       )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reducer, { initialState } from './reducer';\nimport { StateProvider } from './StateProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* DataLayer that surrounds the app. I can push\n    information into the data layer and i can pull it from any\n    component*/}\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}